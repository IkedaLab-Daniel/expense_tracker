Tasks:

########### APIs ##############
- CRUD
✅ 1. View all books
✅ 2. View single book via book's id
✅ 3. Edit/Update single book 
✅ 4. Delete a single book 
✅ 5. View Books by Category
✅ 6. View Books expenses
⌛ 7. View Books expenses by category
✅ 8. Pagination
✅ 9. Filter: Ordering by title (ASC/DES)
✅ 10. Filter: Ordering by expense (ASC/DES)

- Authentication
✅ 1. Protect: Book View 

- Authorization
✅ 1. Admin: All action 
✅ 2. Editors: All actions
✅ 3. Viewers: Read Only 
✅ 4. No LogIn - No action 

- User Management (Endpoints)
✅ 1. Register 
✅ 2. Log In 
✅ 3. Log Out
⌛ 4. Reset Password
⌛ 5. Delete account 
✅ 6. Admin add a user to a group
✅ 7. Admin remove a user to a group

- Database:
✅ Connect to MySQL

######## Client ##############

Pages: 
1. Home Page (Visitor / User)
    1.1. View all books
    1.2. Filters: Category, Ordering
    1.3. Login / Register links

2. Log In / Register

3. Home Page (User)
    3.1. View all books
    3.2. Filters: Category, Ordering
    3.3. Log Out
    3.4. Request to be Editor 

4. Homa Pager (Editors / Admin)
    4.1. View all books
    4.2. Filters: Category, Ordering
    4.3. Add Book item
    4.4. Update Book item 
    4.5. Delete Book item

5. About Page 
    5.1. About Ice
    5.2. About the project
    5.3. Links

# Book by cat

from rest_framework import generics
from .models import Book
from .serializers import BookSerializer

class BooksByCategoryView(generics.ListAPIView):
    serializer_class = BookSerializer

    def get_queryset(self):
        category_id = self.kwargs['category_id']
        return Book.objects.filter(category_id=category_id)

from django.urls import path
from .views import BooksByCategoryView

urlpatterns = [
    path('books/category/<int:category_id>/', BooksByCategoryView.as_view(), name='books-by-category'),
]

### expense by cat

from django.db.models import Sum
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import Book, Category

class ExpensesByCategoryView(APIView):
    def get(self, request):
        expenses_by_category = Book.objects.values('category__id', 'category__name').annotate(
            total_expense=Sum('distribution_expense')
        )
        return Response(expenses_by_category)

urlpatterns += [
    path('expenses/total/', TotalExpensesView.as_view(), name='total-expenses'),
    path('expenses/category/', ExpensesByCategoryView.as_view(), name='expenses-by-category'),
]
